{
  "recho": {
    "title": "Recho",
    "subtitle": "A Platform to Express Yourself Through Music",
    "description": "A music community platform where musicians can freely interact, collaborate in ensembles, trade instruments, and express themselves through short-form videos.\n\nBuilt as a React Native-based app with a webview structure, it leverages smartphone resources to allow users to directly edit ensemble videos.",
    "overview": {
      "projectType": "Team Project",
      "introduction": "A community platform for musicians to connect and communicate",
      "features": "Community, Ensemble Recruitment, Instrument Marketplace, Short-form Content",
      "role": "Backend, Frontend, ERD Design, ffmpeg Integration, AWS Infrastructure Setup"
    },
    "summaries": {
      "development": {
        "title": "Implemented Features and Development Process",
        "parts": {
          "0": {
            "subtitle": "Video Merging Logic with ffmpeg",
            "caption": "Video Editing Screen",
            "0": "To implement the ensemble feature of merging two performance videos, it was necessary to sync the given clips and adjust the equalizer before merging. Using ffmpeg*, we created a filter chain, adjusting the equalizer based on the shorter clip to produce the edited video. Later, ffmpeg was also used for video downscaling* when uploading to S3 and to prevent conflicts with video components.",
            "1": "*ffmpeg: an open-source project for decoding and encoding video, audio, and image formats\n*Downscaling: the process of reducing the size or resolution of raw data, videos, or images"
          },
          "1": {
            "subtitle": "Component Refactoring",
            "caption": "Refactored Components",
            "0": "Team members had individually implemented features (video upload, simultaneous playback/recording, ffmpeg native integration, video merging/editing) which needed to be refactored into a single connected workflow. We separated common components per page, refactored certain functions, and created new pages reorganized with related components and features. As a result, the code length per page decreased by about 50%."
          },
          "2": {
            "subtitle": "Ensemble Session Recruitment Board",
            "caption": "Ensemble Recruitment Board and Registration Screen",
            "0": "A board was needed for recruiting people for ensemble sessions. The author sets the instrument and number of members, and applicants can apply to a session. Initially, instrument parts were managed as an array within the session entity, but index changes during post edits risked breaking the mapping. To solve this, we created a separate instrument part entity, managed in a post‚Äìcomment‚Äìreply structure to ensure consistency and concurrency."
          },
          "3": {
            "subtitle": "Refactoring Likes and Comments Module",
            "caption": "Separated Likes and Comments Feature",
            "0": "Likes and comments were previously managed separately in each board module, which reduced scalability since features like notifications had to be implemented for every module. We refactored likes and comments into standalone modules reused across boards. As a result, the development cost for notifications decreased, cascade dependencies between posts and comments were removed, and comments could be deleted asynchronously, improving post deletion performance."
          },
          "4": {
            "subtitle": "Server Architecture",
            "caption": "Revised Architecture",
            "0": "While designing the deployment architecture, I considered both security and scalability. After studying React Vite‚Äôs build process, I learned it generates a CSR-based SPA. Since videos and images can be delivered directly from S3 without passing through the backend, leveraging a CDN provided efficiency in both cost and performance. Therefore, the frontend was deployed on a static hosting stack (CloudFront + S3), while backend and database servers were deployed within a VPC using ALB, EC2, and RDBMS for security and scalability."
          },
          "5": {
            "subtitle": "Issue Closure",
            "caption": "GitHub Issue Closure",
            "0": "As the project neared completion, unresolved issues had accumulated. After finishing the core features, I prioritized and resolved issues regardless of stack to improve project stability and completeness. As a result, I personally contributed to closing about 40% of all issues, enhancing overall project quality."
          }
        }
      },
      "troubleshooting": {
        "title": "Troubleshooting",
        "parts": {
          "0": {
            "subtitle": "Implementing Video Playback and Simultaneous Recording",
            "caption": "Video Playback and Simultaneous Recording Screen",
            "0": "Problem: To implement the ensemble feature, video playback and camera recording needed to run simultaneously.",
            "1": "Solution Process\n\n\t1. mixWithOthers: set to 'mix' ‚Üí failed\n\t\t- Setting this option in React Native Video did not work.\n\t\t- Reason: iOS default audio session policy disables mixWithOthers; enabling it requires native code modification.\n\n\t2. Added mixWithOthers bridge in a native module ‚Üí failed\n\t\t- VisionCamera had this feature, but Video library did not.\n\t\t- Even after adding the bridge, it didn‚Äôt work.\n\n\t3. Modified Video library native code to add option ‚Üí failed\n\t\t- Added mixWithOthers option directly but still didn‚Äôt work.\n\n\t4. Set disableAudioSessionManagement: true ‚Üí success\n\t\t- Found disableAudioSessionManagement option in the library.\n\t\t- Enabling it allowed video playback and camera audio to run simultaneously.\n",
            "2": "Result: Enabled simultaneous camera recording and video playback, highlighting the importance of understanding library internals."
          },
          "1": {
            "subtitle": "Caching Images and Videos with CloudFront CDN",
            "caption": "Using CloudFront CDN for Caching",
            "0": "Problem: Video and image loading speed was slow.",
            "1": "Solution Process\n\t- Explored methods to store/cache videos and images.\n\t- Switched from directly loading video/image data from S3 buckets to using CloudFront CDN caching.",
            "2": "Result: Average response speed improved by about 2x."
          }
        }
      },
      "results": {
        "title": "Results and Retrospective",
        "parts": {
          "0": {
            "0": "Results",
            "1": "Global state management using Zustand",
            "2": "Maintained consistency and optimized responses using DTOs",
            "3": "Applied ffmpeg for video and audio editing",
            "4": "Leveraged native code for platform-specific features",
            "5": "Reduced loading time through CDN"
          },
          "1": {
            "0": "Retrospective",
            "1": "Enhanced ability to design with shared/common components",
            "2": "Experience designing and implementing integrated backend‚Äìfrontend architecture",
            "3": "Learned scalable design and how to maintain high code quality",
            "4": "Deepened understanding of ffmpeg‚Äôs role in video, audio, and image editing",
            "5": "Gained knowledge of AWS infrastructure setup (VPC, CDN, ALB)",
            "6": "Improved collaboration skills through ERD design, API design, and GitHub branch/issue management"
          }
        }
      },
      "blank": {
        "title": "Thank You."
      }
    },
    "features": [
      {
        "name": "üéµ Music-based Community",
        "description": "Boards for musicians to freely communicate and share information"
      },
      {
        "name": "ü§ù Ensemble Video Sharing",
        "description": "Recruit ensemble members and share performance clips"
      },
      {
        "name": "üì± Short-form Creation",
        "description": "Create and share short-form videos of performances or works"
      },
      {
        "name": "üõ† Instrument Marketplace",
        "description": "Boards for trading instruments and music equipment between users"
      }
    ],
    "developmentProcess": [
      {
        "title": "Planning and Architecture Design",
        "content": "Designed musician-oriented features and created overall service flow and ERD"
      },
      {
        "title": "Feature Implementation",
        "content": "Implemented video editing using ffmpeg and built community features"
      },
      {
        "title": "Deployment and Operation",
        "content": "Deployed services using AWS EC2, S3, Route53, and CloudFront"
      }
    ]
  }
}