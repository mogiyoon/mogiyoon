{
  "recho": {
    "title": "Recho",
    "subtitle": "음악으로 나를 알리는 플랫폼",
    "description": "음악인들이 자유롭게 교류하고, 합주를 함께하고, 악기 중고 거래와 숏폼 영상을 통해 자신을 표현할 수 있는 음악 커뮤니티 플랫폼입니다.\n\n스마트폰의 리소스를 활용하여 합주 영상을 직접 편집할 수 있도록 React Native 기반 앱과 웹뷰 구조로 제작하였습니다.",
    "overview": {
      "projectType": "팀 프로젝트",
      "introduction": "음악인들이 소통할 수 있는 커뮤니티 플랫폼",
      "features": "커뮤니티, 합주 모집, 악기 중고 거래, 숏폼 기능",
      "role": "백엔드, 프론트엔드, ERD 설계, ffmpeg 활용, AWS 서버 구축"
    },
    "summaries": {
      "development": {
        "title": "구현 기능 및 개발 과정",
        "parts": [
          ["ffmpeg를 활용한 비디오 편집 로직 구현", "짧은 길이 비디오 기준으로 비디오 병합", "이퀄라이저로 주파수별 dB 조절 기능 구현"],
          ["합주 기능(비디오 재생+녹화), 비디오 편집 화면, 비디오 병합 로직 연결", "각 페이지별 컴포넌트를 공통 컴포넌트로 리팩토링", "jwt 중심으로 로그인 정보 전역 상태 관리"],
          ["합주 세션 모집 게시판 및 중고 거래 게시판 구현", "합주, 세션, 지원자 관계를 글, 댓글, 대댓글 관계에서 착안하여 DB 구조 설계", "다만 지원자만 별도의 모듈로 분리하여 관리"],
          ["기존의 좋아요와 댓글은 각 게시판 모듈별로 관리됨", "추후 좋아요 및 댓글 기능 추가, 알람 기능 도입 등 유지/보수 및 확장성 면에서 부적합하다고 생각", "좋아요, 댓글을 각각 통합된 모듈로 리팩토링"],
          ["오토스케일링, 보안을 고려한 서버 구조 재설계", "VPC 및 Application Load Balancer 활용", "React가 정적 파일 및 SPA 임을 고려하여 S3를 통해 프론트 배포"],
          ["45개의 이슈 클로즈 중 17개의 이슈 클로즈", "코드 품질 향상 및 사용자 경험 개선"]
        ]
      },
      "troubleshooting": {
        "title": "트러블 슈팅",
        "parts": [
          [],
          ["문제 상황: 합주 기능을 구현하기 위해 카메라 녹화와 영상 재생을 동시에 해야함.", "문제 해결 과정\n\n\t1. mixWithOthers: 'mix' 설정 → 실패\n\t\t- React Native Video 컴포넌트에서 해당 옵션을 설정했지만 작동하지 않음.\n\t\t- 이유: iOS의 기본 오디오 세션 정책상, mixWithOthers 기능이 비활성화되어 있으며, 이를 활성화하려면 네이티브 코드 수정이 필요함.\n\n\t2. 네이티브 모듈에 mixWithOthers 브릿지 추가 → 실패\n\t\t- VisionCamera 라이브러리에는 관련 기능이 있으나, Video 라이브러리에는 존재하지 않음.\n\t\t- 직접 브릿지를 연결해도 효과가 없었음.\n\n\t3. 비디오 라이브러리 네이티브 코드에 옵션 추가 → 실패\n\t\t- 직접 mixWithOthers 관련 설정을 Video 라이브러리에 추가했으나, 여전히 작동하지 않음.\n\n\t4. disableAudioSessionManagement: true 설정 → 성공\n\t\t- 라이브러리 내부의 옵션 중 disableAudioSessionManagement: true 설정을 발견함.\n\t\t- 이 옵션을 활성화하자 비디오와 카메라 오디오가 동시에 작동함.\n", "결과: 카메라 녹화 및 영상 재생이 가능해짐. 라이브러리 내부의 코드의 중요성을 깨닫게 됨 "],
          [],
          ["문제 상황: 영상과 이미지의 로딩 속도가 느림.", "해결 과정\n\t- 영상과 이미지를 저장/캐싱 하는 방식을 고민함.\n\t- S3 버킷에서 영상/이미지 데이터를 직접 로드하는 초기 방식에서 클라우드 프론트의 CDN을 활용하여 영상/이미지 캐싱", "결과: 평균 응답 속도가 2배 정도 빨라짐."]
        ]
      },
      "results": {
        "title": "결과 및 회고",
        "parts": [
          ["결과", "\tZustand 기반의 전역 상태 관리", "\tresponse DTO를 활용한 응답 형식 일관성 유지 및 응답 최적화", "\tffmpeg를 활용한 영상 및 오디오 편집 방법 적용", "\t네이티브 코드를 활용한 네이티브 기능 실행", "\tCDN을 활용한 로딩 시간 단축"],
          ["회고", "\t공통 컴포넌트 중심의 설계 역량 함양", "\t백엔드-프론트엔드 통합 구조 설계 및 구현 경험", "\t확장성 있는 설계 및 유지/보수가 편한 코드 품질 향상에 대한 학습", "\t영상, 오디오, 사진 편집에서 ffmpeg가 차지하는 중요성 이해", "\tAWS 기반의 서버 구축을 통한 VPC, CDN, ALB 구조 정립 및 이해", "\tERD 설계, API 설계, 깃허브 브랜치 및 이슈 관리 등 협업 능력 향상"]
        ]
      },
      "blank": {
        "title": "감사합니다."
      }
    },
    "features": [
      { "name": "🎵 음악 기반 커뮤니티", "description": "음악인들이 자유롭게 소통하고 정보를 공유할 수 있는 게시판 제공" },
      { "name": "🤝 합주 영상 공유", "description": "합주 멤버를 모집하고, 함께 연주한 영상 클립을 공유" },
      { "name": "📱 숏폼 제작", "description": "사용자의 연주나 작업물을 짧은 영상으로 제작하고 공유" },
      { "name": "🛠 악기 중고 거래", "description": "음악 장비와 악기를 사용자 간 중고로 거래할 수 있는 게시판 제공" }
    ],
    "developmentProcess": [
      { "title": "기획 및 구조 설계", "content": "음악인 대상 기능 설계 및 전체 서비스 흐름도 및 ERD 설계" },
      { "title": "기능 구현", "content": "ffmpeg를 이용한 영상 편집 기능 및 사용자 커뮤니티 시스템 구현" },
      { "title": "배포 및 운영", "content": "AWS EC2, S3, Route53, CloudFront를 이용한 서비스 배포" }
    ]
  },

  "test-maker": {
    "title": "Test Maker",
    "subtitle": "나만의 단어장, 나만의 시험지",
    "description": "학생이나 어학 공부를 하는 사람들은 종종 책에 있는 단어를 노트에 옮겨 적고, 외우고, 스스로 시험 보는 과정을 반복합니다. Test Maker는 이 지루하고 비효율적인 과정을 기술로 해결합니다.\n\n카메라로 찍기만 하면 텍스트가 단어장으로, 단어장은 다시 시험지로 자동 변환되어 사용자는 오롯이 '학습'에만 집중할 수 있습니다.",
    "overview": {
      "projectType": "개인 프로젝트",
      "introduction": "문제를 직접 만들고 테스트할 수 있는 프로그램",
      "features": "OCR 단어 추출, 단어장 관리, 객관식/주관식 시험지 자동 생성 및 내보내기"
    },
    "summaries": {
      "development": {
        "title": "구현 기능 및 개발 과정",
        "parts": [
          ["React Native를 기반으로 Google Vision API를 연동하여 핵심 기능인 OCR 단어 추출을 구현했습니다. Redux로 상태를 관리하고, Realm과 AsyncStorage를 사용해 사용자의 단어장 데이터를 로컬에 안전하게 저장합니다."],
          ["설정해둔 특수 기호를 활용하여 텍스트를 순회하며 낱말과 뜻을 추출합니다.", "'-' 기호를 사용하여 단어의 카테고리 위계를 구분합니다."],
          ["특정 카테고리에 포함된 단어를 선택하면 전역 변수에 저장되며 테스트 가능합니다."],
          ["테스트는 객관식과 주관식 두 방식으로 선택 가능합니다.", "틀린 단어에 대해 오답 목록이 제공되며, 객관식 형태로 단어시험 내보내기가 가능합니다."]
        ]
      },
      "troubleshooting": {
        "title": "트러블 슈팅",
        "parts": [
          [],
          [
            "문제 상황: 카테고리에 위계를 추가하여 카테고리가 중첩되는 자료 형태로 변경됐고, 따라서 기존의 자료 탐색 구조를 사용할 수 없었습니다.",
            "해결 과정\n\t- 폴더 구조에서 착안한 트리 구조를 적용했습니다.\n\t- 단어 탐색 함수를 재귀 함수로 구현했습니다.",
            "결과: 하위 카테고리의 깊이에 관계없이 탐색이 가능해졌습니다."
          ],
          [],
          []
        ]
      },
      "results": {
        "title": "결과 및 회고",
        "parts": [
          ["결과", "React Native 활용하여 안드로이드, IOS 모두 구현", "단어 데이터는 트리, 오답 데이터는 힙 자료 구조를 사용하여 구현", "Google Vision Api를 활용"],
          ["회고", "NPM에서 필요한 컴포넌트 라이브러리(그리드)를 찾지 못해 직접 구현하고 NPM에 배포", "자료구조를 활용한 프로그램 구현", "Type Script에 대한 이해도 향상", "전역 상태 관리 및 로컬 스토리지, 로컬 DB에 대한 이해 및 적용"]
        ]
      },
      "blank": {
        "title": "감사합니다."
      }
    },
    "features": [
      { "name": "📸 스마트 OCR 단어 추출", "description": "카메라로 책이나 문서를 촬영하면, 광학 문자 인식(OCR) 기술을 통해 원하는 단어와 그 의미를 자동으로 추출하여 단어장에 추가합니다." }
    ],
    "developmentProcess": [
      { "title": "문제 파악", "content": "기존 단어 암기 방식의 비효율성을 발견하고, 이를 기술로 자동화하여 학습 효율을 높이는 것을 목표로 설정했습니다." }
    ]
  },
  "teacher_test": {
    "title": "Tea Time",
    "subtitle": "초등임용 대비 모바일 학습 앱",
    "description": "대한민국 초등교사 임용 시험을 준비하는 예비 교사들을 위한 모바일 학습 앱입니다. 방대한 교육과정 내용을 언제 어디서든 퀴즈 형태로 학습하고, 틀린 문제를 체계적으로 관리하여 합격에 한 걸음 더 다가갈 수 있도록 돕습니다. Flutter로 제작된 앱으로, 이동 시간이나 자투리 시간에도 핵심 내용을 효율적으로 학습할 수 있도록 설계되었습니다.",
    "overview": {
      "projectType": "개인 프로젝트",
      "introduction": "초등교사 임용 시험 대비를 목표로, 교육과정 기반 문제와 오답 관리를 제공하는 모바일 학습 도구",
      "features": "교육과정/총론 기반 테스트, 오답노트"
    },
    "summaries": {
      "development": {
        "title": "구현 기능 및 개발 과정",
        "parts": [
          ["메인 화면에서는 남은 시험 일수, 오답 목록 및 오답 확인 기능을 제공함."],
          ["교육과정 내용체계표, 성취기준, 총론 학습 기능 제공"],
          ["학년군별 내용체계표 및 시험 기능 제공"],
          ["학년군별 시험 모드 제공"],
          ["시험 모드에서는 자신의 정답을 확인해볼 수 있음."],
          ["원문 및 자신의 정답을 복사하면 메인 화면에서 자신의 답과 정답의 다른 부분을 확인할 수 있음"],
          ["교육과정 성취기준 학습 제공"],
          ["교육과정 총론 학습 기능 제공"]
        ]
      },
      "results": {
        "title": "결과 및 회고",
        "parts": [
          ["결과", "교육과정 기반 문제 풀기 기능 구현", "오답노트 자동 기록 및 재학습 흐름 제공", "Firebase를 활용한 오답 목록 백업"],
          ["회고", "데이터 세분화 및 다차원 배열 활용의 복잡성 이해", "크로스 플랫폼 앱 설계에 대한 이해"]
        ]
      },
      "blank": {
        "title": "감사합니다."
      }
    },
    "features": [
      { "name": "📚 교육과정 기반 문제", "description": "초등 전 학년·전 과목의 교육과정(성취기준) 기반 문제 제공" },
      { "name": "✍️ 다양한 학습 모드", "description": "과목별·학년별·랜덤 등 다양한 학습 모드로 실력 점검" },
      { "name": "❌ 체계적인 오답노트", "description": "틀린 문제를 자동으로 기록하고 해설과 함께 재학습 가능" },
      { "name": "📊 학습 통계", "description": "전체 정답률·과목별 정답률 등을 시각화하여 학습 현황 파악" }
    ],
    "developmentProcess": [
      { "title": "기획 및 구조 설계", "content": "교육과정 기반 문항 구조 설계 및 DB/메타데이터 모델링" },
      { "title": "기능 구현", "content": "문항 풀기, 오답노트, 검색, 통계 등 핵심 학습 기능 구현" },
      { "title": "배포 및 운영", "content": "앱 스토어 제출 준비, 리소스 최적화 및 사용자 피드백 반영" }
    ]
  },
  "mrnsg": {
    "id": "mrnsg",
    "title": "mogiyoon-react-native-simple-grid",
    "subtitle": "React Native를 위한 간단하고 가벼운 그리드 컴포넌트",
    "description": "'Test Maker' 프로젝트 진행 중 간단한 그리드 컴포넌트가 필요했지만 NPM에서 적합한 것을 찾지 못했습니다. 이 문제를 해결하기 위해 직접 경량 그리드 라이브러리를 개발하고 배포했습니다. 개발자가 데이터와 원하는 컬럼 수만 전달하면 손쉽게 그리드 레이아웃을 만들 수 있습니다.",
    "overview": {
      "projectType": "개인 프로젝트 (라이브러리)",
      "period": "2024.01",
      "introduction": "React Native 환경에서 간단하게 그리드 UI를 구현할 수 있는 라이브러리",
      "features": "컬럼 수 지정, 데이터 매핑 렌더링, 높이 조절 옵션",
      "role": "100% (기획, 개발, 테스트, 배포)"
    },
    "summaries": {
      "development": {
        "title": "구현 기능 및 개발 과정",
        "parts": [
          ["개발 동기: 'Test Maker' 프로젝트에서 간단한 그리드 컴포넌트의 필요성을 느껴 직접 개발을 결심"],
          ["핵심 로직: 'columnNumber' prop을 기반으로 동적으로 열을 계산하고 렌더링하여 반응형 그리드 레이아웃을 보장하는 로직 구현"],
          ["배포: 타입 안정성을 위해 TypeScript로 개발하고, 다른 개발자들도 사용할 수 있도록 NPM에 공개 패키지로 배포"]
        ]
      },
      "troubleshooting": {
        "title": "트러블 슈팅",
        "parts": [
          [],
          [
            "문제 상황: 첫 NPM 배포를 위한 번들링 설정 및 의존성 구성에 어려움을 겪음.",
            "해결 과정: NPM 배포 프로세스와 TypeScript 라이브러리 번들링 관련 문서를 참고하여, 수차례의 시도 끝에 배포에 적합한 'tsconfig.json' 및 'package.json' 설정을 완료함.",
            "결과: 라이브러리 배포 생태계에 대한 깊은 이해를 얻고 성공적으로 패키지를 배포함."
          ]
        ]
      },
      "results": {
        "title": "결과 및 회고",
        "parts": [
          ["결과", "\tNPM에 컴포넌트 라이브러리를 성공적으로 개발하고 배포", "\t다른 프로젝트에서도 활용할 수 있는 재사용 가능한 컴포넌트 제작", "\t확장성 있는 컴포넌트 제작을 위한 TypeScript 이해도 향상"],
          ["회고", "\t기획부터 공개까지 라이브러리 개발의 전 과정을 경험", "\t라이브러리 사용자를 위한 명확한 문서화의 중요성을 깨달음", "\t하나의 프로젝트에서 마주한 문제를 별도의 모듈형 솔루션으로 만들어 해결하는 방법을 학습"]
        ]
      },
      "blank": {
        "title": "감사합니다."
      }
    },
    "features": [
      { "name": "✨ 쉬운 사용법", "description": "'data'와 'columnNumber' 등 최소한의 props로 그리드 레이아웃 생성" },
      { "name": "🔧 커스터마이징", "description": "컬럼 수와 최대 높이를 제어할 수 있는 옵션 제공" },
      { "name": "⚡ 경량화", "description": "의존성을 최소화한 간단한 컴포넌트로 프로젝트에 부담을 주지 않음" }
    ],
    "developmentProcess": [
      { "title": "문제 파악", "content": "개인 프로젝트에 필요했던 간단하고 적합한 그리드 라이브러리의 부재를 인지" },
      { "title": "핵심 기능 구현", "content": "TypeScript와 React Native 컴포넌트를 사용하여 컬럼 기반 아이템 렌더링 핵심 로직 개발" },
      { "title": "NPM 배포", "content": "외부에서 사용할 수 있도록 배포 설정을 완료하고 NPM 레지스트리에 공개" }
    ]
  }
}