{
  "recho": {
    "title": "Recho",
    "subtitle": "음악으로 나를 알리는 플랫폼",
    "description": "음악인들이 자유롭게 교류하고, 합주를 함께하고, 악기 중고 거래와 숏폼 영상을 통해 자신을 표현할 수 있는 음악 커뮤니티 플랫폼입니다.\n\n스마트폰의 리소스를 활용하여 합주 영상을 직접 편집할 수 있도록 React Native 기반 앱과 웹뷰 구조로 제작하였습니다.",
    "overview": {
      "projectType": "팀 프로젝트",
      "introduction": "음악인들이 소통할 수 있는 커뮤니티 플랫폼",
      "features": "커뮤니티, 합주 모집, 악기 중고 거래, 숏폼 기능",
      "role": "백엔드, 프론트엔드, ERD 설계, ffmpeg 활용, AWS 서버 구축"
    },
    "summaries": {
      "development": {
        "title": "구현 기능 및 개발 과정",
        "parts": {
          "0": {
            "subtitle": "ffmpeg를 활용한 동영상 병합 로직 구현",
            "caption": "영상 편집 화면",
            "0": "연주 영상을 둘로 합치는 ‘합주’하기 기능을 구현하기 위해서 주어진 동영상의 싱크를 맞추고 이퀄라이저를 조절하여 영상을 병합하는 과정이 필요함. ffmpeg*를 활용한 필터 체인을 생성하여 짧은 영상을 기준으로 이퀄라이저를 조정하여 편집 영상을 생성함. 추후 S3 업로드 및 비디오 컴포넌트 충돌 방지를 위한 영상 다운 스케일링*에도 ffmpeg를 활용함.",
            "1": "*ffmpeg: 동영상, 음악, 사진 포맷들의 디코딩, 인코딩을 위한 프로젝트\n*다운 스케일링: 원본 데이터·영상·이미지·해상도 등의 크기를 줄이는 과정"
          },
          "1": {
            "subtitle": "컴포넌트 리팩토링",
            "caption": "리팩토링된 컴포넌트",
            "0": "팀원들이 각자 구현한 기능(영상 업로드, 영상 동시 재생/녹화, ffmpeg 라이브러리 네이티브 이식, 영상 병합 및 편집)을 하나의 연결된 기능으로 리팩토링 해야함. 각 페이지별 공통 컴포넌트를 분리하고 특정 함수들은 리팩토링하고 새로운 페이지를 만들어 관련 컴포넌트 및 기능으로 재구성함. 각 페이지별 코드의 길이가 50% 가량 감소함."
          },
          "2": {
            "subtitle": "합수 세션 모집 게시판 구현",
            "caption": "합주 모집 게시판 및 합주 모집 등록 화면",
            "0": "합주를 위해 사람을 모집하는 게시판을 구현해야함. 글 작성자는 악기와 인원 수를 정해서 올리면, 지원자가 하나의 세션에 신청할 수 있는 구조임. 처음에는 세션 게시물 엔티티의 컬럼에서 악기 파트를 배열로 관리하려 했으나, 게시물 수정 시 배열 인덱스 변경으로 인해 매핑이 깨질 수도 있음. 따라서 악기 파트 엔티티를 따로 만들어서 게시물 - 댓글 - 대댓글의 형태로 관리하여 일관성 및 동시성을 유지함."
          },
          "3": {
            "subtitle": "좋아요, 댓글 모듈 리팩토링",
            "caption": "분리된 댓글과 좋아요 기능",
            "0": "좋아요와 댓글이 각 게시판 모듈별로 관리되고 있었음. 추후 알람 기능을 비롯한 좋아요와 댓글 기능을 구현할 때 각 모듈별로 기능을 추가해야하는 측면에서 확장성이 떨어짐. 각 게시판 별 댓글과 좋아요 기능을 각각의 모듈을 통해 관리하도록 리팩토링함. 알람 구현의 개발 비용이 감소했고, 댓글과 게시물의 Cascade 종속 관계가 제거됨. 댓글은 비동기적으로 삭제하게 되고 게시물 삭제 속도가 증가함."
          },
          "4": {
            "subtitle": "서버 구축",
            "caption": "수정된 아키텍처",
            "0": "배포 서버를 위해 보안을 위해 VPC를 포함한 서버 구조를 설계 방법을 고민함. React Vite의 빌드 방식에 대해 학습해보니 CSR기반의 SPA로 빌드되는 것을 알게됨. 또한 영상과 이미지는 백엔드 서버를 거치지 않고, S3에서 전송되므로 CDN을 활용할 경우 비용과 속도 측면에서 효율적이라는 것을 학습함. 따라서 프론트엔드는 정적 호스팅 서버인 Cloud Front 및 S3를 기반으로 배포를 함. 백엔드 및 DB 서버는 보안 및 확장성을 고려하여 VPC 환경에서 ALB, EC2, RDMS 기반으로 구성함."
          },
          "5": {
            "subtitle": "이슈 클로즈",
            "caption": "깃허브 이슈 클로즈",
            "0": "개발이 막바지에 이르러 해결되지 않은 이슈가 쌓였음. 주어진 기능들의 구현을 마치고, 프로젝트 안정성을 확보 및 완성도를 높이기 위해, 이슈의 기술 스택에 관계없이 우선순위를 정하고 해결함. 그 결과 전체 이슈 중 40%를 직접 클로즈하며 프로젝트 품질 향상에 기여함"
          }
        }
      },
      "troubleshooting": {
        "title": "트러블 슈팅",
        "parts": {
          "0": {
            "subtitle": "영상 재생 및 동시 녹화 기능 구현",
            "caption": "영상 재생 및 동시 녹화 화면",
            "0": "문제 상황: 합주 기능을 구현하기 위해 카메라 녹화와 영상 재생을 동시에 해야함.",
            "1": "해결 과정\n\n\t1. mixWithOthers: 'mix' 설정 → 실패\n\t\t- React Native Video 컴포넌트에서 해당 옵션을 설정했지만 작동하지 않음.\n\t\t- 이유: iOS의 기본 오디오 세션 정책상, mixWithOthers 기능이 비활성화되어 있으며, 이를 활성화하려면 네이티브 코드 수정이 필요함.\n\n\t2. 네이티브 모듈에 mixWithOthers 브릿지 추가 → 실패\n\t\t- VisionCamera 라이브러리에는 관련 기능이 있으나, Video 라이브러리에는 존재하지 않음.\n\t\t- 직접 브릿지를 연결해도 효과가 없었음.\n\n\t3. 비디오 라이브러리 네이티브 코드에 옵션 추가 → 실패\n\t\t- 직접 mixWithOthers 관련 설정을 Video 라이브러리에 추가했으나, 여전히 작동하지 않음.\n\n\t4. disableAudioSessionManagement: true 설정 → 성공\n\t\t- 라이브러리 내부의 옵션 중 disableAudioSessionManagement: true 설정을 발견함.\n\t\t- 이 옵션을 활성화하자 비디오와 카메라 오디오가 동시에 작동함.\n",
            "2": "결과: 카메라 녹화 및 영상 재생이 가능해짐. 라이브러리 내부의 코드의 중요성을 깨닫게 됨 "
          },
          "1": {
            "subtitle": "클라우드 프론트 CDN을 활용한 이미지/영상 캐싱",
            "caption": "클라우드 프론트 CDN을 활용한 이미지/영상 캐싱",
            "0": "문제 상황: 영상과 이미지의 로딩 속도가 느림.",
            "1": "해결 과정\n\t- 영상과 이미지를 저장/캐싱 하는 방식을 고민함.\n\t- S3 버킷에서 영상/이미지 데이터를 직접 로드하는 초기 방식에서 클라우드 프론트의 CDN을 활용하여 영상/이미지 캐싱",
            "2": "결과: 평균 응답 속도가 2배 정도 빨라짐."
          }
        }
      },
      "results": {
        "title": "결과 및 회고",
        "parts": {
          "0": {
            "0": "결과",
            "1": "\tZustand 기반의 전역 상태 관리",
            "2": "\tresponse DTO를 활용한 응답 형식 일관성 유지 및 응답 최적화",
            "3": "\tffmpeg를 활용한 영상 및 오디오 편집 방법 적용",
            "4": "\t네이티브 코드를 활용한 네이티브 기능 실행",
            "5": "\tCDN을 활용한 로딩 시간 단축"
          },
          "1": {
            "0": "회고",
            "1": "\t공통 컴포넌트 중심의 설계 역량 함양",
            "2": "\t백엔드-프론트엔드 통합 구조 설계 및 구현 경험",
            "3": "\t확장성 있는 설계 및 유지/보수가 편한 코드 품질 향상에 대한 학습",
            "4": "\t영상, 오디오, 사진 편집에서 ffmpeg가 차지하는 중요성 이해",
            "5": "\tAWS 기반의 서버 구축을 통한 VPC, CDN, ALB 구조 정립 및 이해",
            "6": "\tERD 설계, API 설계, 깃허브 브랜치 및 이슈 관리 등 협업 능력 향상"
          }
        }
      },
      "blank": {
        "title": "감사합니다."
      }
    },
    "features": [
      {
        "name": "🎵 음악 기반 커뮤니티",
        "description": "음악인들이 자유롭게 소통하고 정보를 공유할 수 있는 게시판 제공"
      },
      {
        "name": "🤝 합주 영상 공유",
        "description": "합주 멤버를 모집하고, 함께 연주한 영상 클립을 공유"
      },
      {
        "name": "📱 숏폼 제작",
        "description": "사용자의 연주나 작업물을 짧은 영상으로 제작하고 공유"
      },
      {
        "name": "🛠 악기 중고 거래",
        "description": "음악 장비와 악기를 사용자 간 중고로 거래할 수 있는 게시판 제공"
      }
    ],
    "developmentProcess": [
      {
        "title": "기획 및 구조 설계",
        "content": "음악인 대상 기능 설계 및 전체 서비스 흐름도 및 ERD 설계"
      },
      {
        "title": "기능 구현",
        "content": "ffmpeg를 이용한 영상 편집 기능 및 사용자 커뮤니티 시스템 구현"
      },
      {
        "title": "배포 및 운영",
        "content": "AWS EC2, S3, Route53, CloudFront를 이용한 서비스 배포"
      }
    ]
  }
}
