{
  "test-maker": {
    "title": "Test Maker",
    "subtitle": "나만의 단어장, 나만의 시험지",
    "description": "학생이나 어학 공부를 하는 사람들은 종종 책에 있는 단어를 노트에 옮겨 적고, 외우고, 스스로 시험 보는 과정을 반복합니다. Test Maker는 이 지루하고 비효율적인 과정을 기술로 해결합니다.\n\n카메라로 찍기만 하면 텍스트가 단어장으로, 단어장은 다시 시험지로 자동 변환되어 사용자는 오롯이 '학습'에만 집중할 수 있습니다.",
    "overview": {
      "projectType": "개인 프로젝트",
      "introduction": "문제를 직접 만들고 테스트할 수 있는 프로그램",
      "features": "OCR 단어 추출, 단어장 관리, 객관식/주관식 시험지 자동 생성 및 내보내기"
    },
    "summaries": {
      "development": {
        "title": "구현 기능 및 개발 과정",
        "parts": {
          "0": {
            "subtitle": "단어장 제작 및 관리 기능",
            "caption": "카메라로 찍은 사진과 OCR로 추출한 데이터",
            "0": "단어장을 만들기 위해 OCR API 데이터를 추출, 추출 데이터의 상태 관리, 단어장 저장 기능이 필요함. OCR API 중에서는 한글과 영문 인식률이 높으며 변환 속도가 빠른 모델을 선택함. API로 받아온 데이터는 타입 안정성 우수하고 디버깅이 용이한 Redux를 활용하여 관리하였고, 저장할 때는 단어, 의미, 카테고리, 오답횟수 등 정보를 관리하기 용이한 Realm을 사용함."
          },
          "1": {
            "subtitle": "단어 카테고리 관리",
            "caption": "텍스트 편집 및 단어 추가 화면",
            "0": "단어를 관리할 때 대/중/소분류로 나누어 카테고리를 관리하기에는 유연성과 확장성이 떨어진다고 생각함. 폴더 구조가 적합할 것이라고 판단했고, 트리 구조 및 재귀 함수를 활용하여 카테고리 기능을 구현함."
          },
          "2": {
            "subtitle": "카테고리/단어 선택 기능",
            "caption": "카테고리/단어 선택 화면",
            "0": "단어장을 생성한 뒤 테스트하거나 피드백을 받을 수 있는 기능들이 필요했음. 단어를 선택하고, 선택한 단어를 객관식, 주관식으로 테스트한 뒤, 오답을 확인하는 기능이 필요함. 따라서 단어 선택 과정에서 재귀 함수를 사용하고, 선택된 단어는 전역 상태로 관리되게 함. 테스트를 할 때는 큐에 랜덤으로 단어들을 넣고, 큐의 마지막에 마커를 넣어서 지속적으로 테스트를 진행할 수 있게 함. 틀린 단어들은 Realm을 통해 관리함. 단어 선택부터 테스트 및 오답 확인까지 가능하도록 학습할 수 있는 구조를 구현함."
          },
          "3": {
            "subtitle": "단어 테스트 기능",
            "caption": "객곤식/주관식 테스트",
            "0": "객관식 테스트를 할 때 보기들을 그리드 형태로 렌더링 해야했음. 그러나 NPM에 등록된 라이브러리 중 React Native 그리드 라이브러리의 마지막 업데이트가 오래 전이라 호환성이 떨어졌고, 다른 등록된 라이브러리들은 설명이 부족했음. 따라서 Flat List를 참고하여 그리드 컴포넌트를 구현하고 Create React Library의 도움을 받아 그리드 컴포넌트를 Npm에 직접 배포함. 덕분에 Npm 생태계 및 node module 폴더의 라이브러리 작동 방식을 알게되었음."
          }
        }
      },
      "troubleshooting": {
        "title": "트러블 슈팅",
        "parts": {
          "0": {
            "subtitle": "카레고리의 트리 구조화",
            "caption": "단어 관리 화면",
            "0": "문제 상황: 카테고리에 위계를 추가하여 카테고리가 중첩되는 자료 형태로 변경됐고, 따라서 기존의 자료 탐색 구조를 사용할 수 없었습니다.",
            "1": "해결 과정\n\t- 폴더 구조에서 착안한 트리 구조를 적용했습니다.\n\t- 단어 탐색 함수를 재귀 함수로 구현했습니다.",
            "2": "결과: 하위 카테고리의 깊이에 관계없이 탐색이 가능해졌습니다."
          }
        }
      },
      "results": {
        "title": "결과 및 회고",
        "parts": {
          "0": {
            "0": "결과",
            "1": "React Native 활용하여 안드로이드, IOS 모두 구현",
            "2": "단어 데이터는 트리, 오답 데이터는 힙 자료 구조를 사용하여 구현",
            "3": "Google Vision Api를 활용"
          },
          "1": {
            "0": "회고",
            "1": "NPM에서 필요한 컴포넌트 라이브러리(그리드)를 찾지 못해 직접 구현하고 NPM에 배포",
            "2": "자료구조를 활용한 프로그램 구현",
            "3": "Type Script에 대한 이해도 향상",
            "4": "전역 상태 관리 및 로컬 스토리지, 로컬 DB에 대한 이해 및 적용"
          }
        }
      },
      "blank": {
        "title": "감사합니다."
      }
    },
    "features": [
      {
        "name": "📸 스마트 OCR 단어 추출",
        "description": "카메라로 책이나 문서를 촬영하면, 광학 문자 인식(OCR) 기술을 통해 원하는 단어와 그 의미를 자동으로 추출하여 단어장에 추가합니다."
      }
    ],
    "developmentProcess": [
      {
        "title": "문제 파악",
        "content": "기존 단어 암기 방식의 비효율성을 발견하고, 이를 기술로 자동화하여 학습 효율을 높이는 것을 목표로 설정했습니다."
      }
    ]
  }
}
