# 워크플로우의 이름을 지정합니다. (GitHub Actions 탭에 표시됨)
name: Build, Test, and Deploy

# 워크플로우가 언제 실행될지를 정의하는 '트리거' 설정입니다.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# 실제 수행될 작업(Job)들을 정의합니다.
jobs:
  # 'build-test' 라는 이름의 작업을 정의합니다. (Pull Request 시 실행)
  build-test:
    # if 조건: 이 작업은 pull_request 이벤트일 때만 실행됩니다.
    if: github.event_name == 'pull_request'
    # 이 작업이 실행될 가상 서버의 운영체제를 지정합니다.
    runs-on: ubuntu-latest

    # 작업 안에서 실행될 단계(Step)들을 순서대로 나열합니다.
    steps:
      # 1. 저장소 코드 가져오기 (체크아웃)
      - name: Checkout repository code
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정 및 빌드 (배포는 하지 않음)
      # React, Vue, Angular 등 빌드 과정이 필요한 경우에만 이 단계를 사용하세요.
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 프로젝트에 맞는 Node.js 버전 입력
      - name: Install dependencies # 의존성 패키지 설치
        run: npm install
      - name: Build project # 프로젝트 빌드
        run: npm run build

  # 'deploy'라는 이름의 작업을 정의합니다. (Main 브랜치에 Push/Merge 시 실행)
  deploy:
    # if 조건: main 브랜치에 push 이벤트가 발생했을 때만 실행됩니다.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # 이 작업이 실행될 가상 서버의 운영체제를 지정합니다.
    runs-on: ubuntu-latest
    # build-test 작업이 있다면, 그 작업이 성공해야만 deploy가 실행되도록 설정할 수 있습니다.
    # needs: build-test 

    # 작업 안에서 실행될 단계(Step)들을 순서대로 나열합니다.
    steps:
      # 1. 저장소 코드 가져오기 (체크아웃)
      - name: Checkout repository code
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 # 본인의 리전으로 변경

      # 3. Node.js 환경 설정 및 빌드
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Build project
        run: npm run build

      # 4. S3 버킷에 파일 동기화(업로드)
      - name: Sync files to S3 bucket
        run: |
          aws s3 sync ./dist s3://mogiyoon --delete

      # 5. CloudFront 캐시 무효화
      - name: Create CloudFront invalidation
        run: |
          aws cloudfront create-invalidation --distribution-id E23HDQBTOWJ5YJ --paths "/*"